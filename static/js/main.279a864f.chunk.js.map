{"version":3,"sources":["components/NuevoRegistro.jsx","components/Detalle.jsx","App.js","features/registros/registrosSlice.js","app/store.js","index.js"],"names":["React","Component","data","id","nombre","apellido","App","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modalActualizar","modalInsertar","form","handleChange","e","setState","objectSpread","defineProperty","target","name","value","mostrarModalInsertar","cerrarModalInsertar","insertar","valorNuevo","lista","push","mostrarModalActualizar","dato","cerrarModalActualizar","editar","contador","arreglo","map","registro","eliminar","window","confirm","splice","inherits","createClass","key","_this2","react_default","a","createElement","Fragment","reactstrap_module","className","color","onClick","isOpen","readOnly","type","onChange","registrosSlice","createSlice","initialState","reducers","store","configureStore","reducer","registros","registrosReducer","ReactDOM","createRoot","document","getElementById","render","es","src_App_0"],"mappings":"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","file":"static/js/main.279a864f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Container, Modal, ModalHeader, ModalBody, FormGroup, ModalFooter, } from \"reactstrap\";\r\n\r\nclass NuevoRegistro extends React.Component {\r\n\r\n    state = {\r\n        modalInsertar: false,\r\n        form: {\r\n            nombre: \"\",\r\n            apellido: \"\",\r\n        }\r\n    }\r\n\r\n    mostrarModalInsertar = () => {\r\n        this.setState({\r\n            modalInsertar: true,\r\n        });\r\n    };\r\n\r\n    cerrarModalInsertar = () => {\r\n        this.setState({ modalInsertar: false });\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value,\r\n            },\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Container>\r\n                        <div className='my-2 text-center'>\r\n                            <Button color='success' onClick={() => this.mostrarModalInsertar()}>nuevo</Button>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <div>\r\n                    <Modal isOpen={this.state.modalInsertar}>\r\n                        <ModalHeader>\r\n                            <div><h3>Insertar Personaje</h3></div>\r\n                        </ModalHeader>\r\n\r\n                        <ModalBody>\r\n                            {/* <FormGroup>\r\n                                <label>Id:</label>\r\n                                <input className=\"form-control\" readOnly type=\"text\" />\r\n                            </FormGroup> */}\r\n\r\n                            <FormGroup>\r\n                                <label>Nombre:</label>\r\n                                <input className=\"form-control\" name=\"nombre\" type=\"text\" onChange={this.handleChange}/>\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <label>Apellido:</label>\r\n                                <input className=\"form-control\" name=\"apellido\" type=\"text\" onChange={this.handleChange}/>\r\n                            </FormGroup>\r\n\r\n                        </ModalBody>\r\n\r\n                        <ModalFooter>\r\n                            <Button color=\"primary\" onClick={() => this.insertar()}> Insertar </Button>\r\n                            <Button className=\"btn btn-danger\" onClick={() => this.cerrarModalInsertar()}>Cancelar</Button>\r\n                        </ModalFooter>\r\n                    </Modal>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default NuevoRegistro;","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Table, Button, Container, Modal,  ModalHeader,  ModalBody,  FormGroup,  ModalFooter } from \"reactstrap\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst data = [\r\n\r\n  ];\r\n\r\nclass Detalle extends React.Component {\r\n    \r\n    \r\n    state = {\r\n        data: data,\r\n        modalActualizar: false,\r\n        modalInsertar: false,\r\n        form: {\r\n            id: \"\",\r\n            nombre: \"\",\r\n            apellido: \"\",\r\n        }\r\n    }\r\n\r\n    DummyView = () => {\r\n        const reducer = useSelector(state => state.registros);\r\n        console.log(reducer[0])\r\n\r\n\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            form: {\r\n                ...this.state.form,\r\n                [e.target.name]: e.target.value,\r\n            },\r\n        });\r\n    };\r\n\r\n    mostrarModalActualizar = (dato) => {\r\n        this.setState({\r\n            form: dato,\r\n            modalActualizar: true,\r\n        });\r\n    };\r\n\r\n    cerrarModalActualizar = () => {\r\n        this.setState({ modalActualizar: false });\r\n    };\r\n\r\n    editar = (dato) => {\r\n        var contador = 0;\r\n        var arreglo = this.state.data;\r\n        arreglo.map((registro) => {\r\n            if (dato.id === registro.id) {\r\n                arreglo[contador].nombre = dato.nombre;\r\n                arreglo[contador].apellido = dato.apellido;\r\n            }\r\n            contador++;\r\n        });\r\n        this.setState({ data: arreglo, modalActualizar: false });\r\n    };\r\n\r\n    eliminar = (dato) => {\r\n        var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \" + dato.id);\r\n        if (opcion === true) {\r\n            var contador = 0;\r\n            var arreglo = this.state.data;\r\n            arreglo.map((registro) => {\r\n                if (dato.id === registro.id) {\r\n                    arreglo.splice(contador, 1);\r\n                }\r\n                contador++;\r\n            });\r\n            this.setState({ data: arreglo, modalActualizar: false });\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <this.DummyView/>\r\n                <div className='my-2 text-center'>\r\n                    <Container>\r\n                        <div className='my-5 text-center'>\r\n                            <Table>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Id</th>\r\n                                        <th>Nombre</th>\r\n                                        <th>Apellido</th>\r\n                                        <th>Acciones</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {this.state.data.map((dato, idx) => (\r\n                                        <tr key={idx}>\r\n                                            <td>{dato.id}</td>\r\n                                            <td>{dato.nombre}</td>\r\n                                            <td>{dato.apellido}</td>\r\n                                            <td><Button color='primary' onClick={() => this.mostrarModalActualizar(dato)} >Editar</Button>\r\n                                                {\" \"}\r\n                                                <Button color='danger' onClick={() => this.eliminar(dato)}>Eliminar</Button></td>\r\n                                        </tr>\r\n                                    )\r\n                                    )}\r\n                                </tbody>\r\n                            </Table>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Modal isOpen={this.state.modalActualizar}>\r\n                    <ModalHeader>\r\n                        <div><h3>Editar Registro</h3></div>\r\n                    </ModalHeader>\r\n\r\n                    <ModalBody>\r\n                        <FormGroup>\r\n                            <label>Id:</label>\r\n                            <input className=\"form-control\" readOnly type=\"text\" value={this.state.form.id} />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <label>Personaje: </label>\r\n                            <input className=\"form-control\" name=\"nombre\" type=\"text\" onChange={this.handleChange} value={this.state.form.nombre} />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup>\r\n                            <label>Anime:</label>\r\n                            <input className=\"form-control\" name=\"apellido\" type=\"text\" onChange={this.handleChange} value={this.state.form.apellido} />\r\n                        </FormGroup>\r\n                    </ModalBody>\r\n\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={() => this.editar(this.state.form)}>Editar</Button>\r\n                        <Button color=\"danger\" onClick={() => this.cerrarModalActualizar()}>Cancelar</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Detalle;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Table, Button, Container, Modal,  ModalHeader,  ModalBody,  FormGroup,  ModalFooter } from \"reactstrap\";\nimport Formulario from './components/Formulario';\n\nconst data = [\n  { id: 1, nombre: \"Juan\", apellido: \"Jimenez\" },\n  { id: 2, nombre: \"Benjamin\", apellido: \"Nieto\" },\n  { id: 3, nombre: \"Jhonatan\", apellido: \"Facete\" },\n  { id: 4, nombre: \"Roiner\", apellido: \"Escobar\" },\n  {id: 5, nombre: \"Jose\", apellido: \"Rodriguez\"}\n];\n\n\nclass App extends React.Component {\n\n  state={\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      id: \"\",\n      nombre: \"\",\n      apellido: \"\",\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  insertar= ()=>{\n    var valorNuevo= {...this.state.form};\n    valorNuevo.id=this.state.data.length+1;\n    var lista= this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.id === registro.id) {\n        arreglo[contador].nombre = dato.nombre;\n        arreglo[contador].apellido = dato.apellido;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+dato.id);\n    if (opcion === true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.id === registro.id) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  render(){\n    return(\n      <>\n    <Container>\n      <div className='my-2 text-center'>\n        <Button color='success' onClick={()=>this.mostrarModalInsertar()}>nuevo</Button>\n      </div>\n\n      <div className='my-5 text-center'>\n      <Table>\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Nombre</th>\n            <th>Apellido</th>\n            <th>Acciones</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {this.state.data.map((dato) => (\n            <tr key={dato}>\n              <td>{dato.id}</td>\n              <td>{dato.nombre}</td>\n              <td>{dato.apellido}</td>\n              <td><Button color='primary' onClick={() => this.mostrarModalActualizar(dato)}>Editar</Button>\n              {\" \"}\n              <Button color='danger' onClick={()=> this.eliminar(dato)}>Eliminar</Button></td>\n            </tr>\n          )\n          )}\n        </tbody>\n      </Table>\n      </div>\n    </Container>\n\n    {/* <!- modal insertar --> */}\n    <div>\n      <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n            <div><h3>Insertar Personaje</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>Id:</label>\n              <input className=\"form-control\" readOnly type=\"text\" value={this.state.data.length+1} />\n            </FormGroup>\n\n            <FormGroup>\n              <label>Nombre:</label>\n              <input className=\"form-control\" name=\"nombre\" type=\"text\" onChange={this.handleChange} />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>Apellido:</label>\n              <input className=\"form-control\" name=\"apellido\" type=\"text\" onChange={this.handleChange} />\n            </FormGroup>\n\n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.insertar()}> Insertar </Button>\n            <Button className=\"btn btn-danger\" onClick={() => this.cerrarModalInsertar()}>Cancelar</Button>\n          </ModalFooter>\n      </Modal>\n    </div>\n\n    {/* modal actualizar */}\n    <Modal isOpen={this.state.modalActualizar}>\n          <ModalHeader>\n           <div><h3>Editar Registro</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>Id:</label>\n              <input className=\"form-control\" readOnly type=\"text\" value={this.state.form.id} />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>Personaje: </label>\n              <input className=\"form-control\" name=\"nombre\" type=\"text\" onChange={this.handleChange} value={this.state.form.nombre} />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>Anime:</label>\n              <input className=\"form-control\" name=\"apellido\" type=\"text\" onChange={this.handleChange} value={this.state.form.apellido} />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button color=\"primary\" onClick={() => this.editar(this.state.form)}>Editar</Button>\n            <Button color=\"danger\" onClick={() => this.cerrarModalActualizar()}>Cancelar</Button>\n          </ModalFooter>\n        </Modal>\n\n\n    \n    </>\n    )}\n\n}\n\n\n\n/*function App() {\n\n  return (\n    <div>\n      <Formulario/>\n    </div>\n  );\n}*/\n\nexport default App;\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nconst data = [\r\n    { id: 1, nombre: \"Juano\", apellido: \"Jimenez\" },\r\n    { id: 2, nombre: \"Benjamino\", apellido: \"Nieto\" },\r\n    { id: 3, nombre: \"Jhonatano\", apellido: \"Facete\" },\r\n    { id: 4, nombre: \"Roinero\", apellido: \"Escobar\" },\r\n    { id: 5, nombre: \"Joseo\", apellido: \"Rodriguez\" }\r\n];\r\n\r\nexport const registrosSlice = createSlice({\r\n    name: 'registro',\r\n    initialState: [data],\r\n    reducers: {\r\n\r\n    }\r\n})\r\n\r\nexport default registrosSlice.reducer","import {configureStore} from '@reduxjs/toolkit';\r\nimport registrosReducer from \"../features/registros/registrosSlice\";\r\n\r\nexport const store = configureStore({\r\n    reducer:{\r\n        registros: registrosReducer,\r\n    }\r\n    \r\n\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport {store} from './app/store'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);"],"sourceRoot":""}